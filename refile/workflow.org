* Emacs
  :PROPERTIES:
  :ID:       5A1160A6-B9CE-4E1B-9FA9-F846A3C918ED
  :END:
** leetcode
*** DONE [[https://github.com/kaiwk/leetcode.el][leetcode.el]]
    :LOGBOOK:
    CLOCK: [2020-03-03 Tue 11:21]--[2020-03-03 Tue 11:59] =>  0:38
    CLOCK: [2020-02-06 Thu 13:57]--[2020-02-06 Thu 13:57] =>  0:00
    :END:
  [2020-02-06 Thu 13:57]
**** login failure issue
***** use chrome login cookies
      author have update the code on Jan 1, 2020
  #+begin_quote
  LeetCode do not allow third party login, one workaround is restore LeetCode session from local Chrome cookies. To do this, you need to install a Python3 package called my_cookies: pip3 install my_cookies. Then run my_cookies command in cmd.
  #+end_quote
**** use hust vpn
     works well
**** use ssr
     not woek: cannot connect to leetcode.com
**** my design of a desired leetcode tool
  - both china and internal servers
  - save the problem description and code into a file automatically
  - support local test cases
  - view solutions
**** alternative<2020-03-03 Tue 11:58>
***** VS code
I do not use VS code now. [2020-04-15 Wed]
Because of submission error.
***** Leetcode cli
using!

*** leetcode-cli

**** configuration
https://skygragon.github.io/leetcode-cli/advanced
**** issue: plugins cannot download
download from https://github.com/skygragon/leetcode-cli-plugins/tree/master/plugins.
copy to /usr/local/lib/node_modules/leetcode-cli/lib/plugins/
**** issue: 'leetcode show 1' not work
/usr/local/lib/node_modules/leetcode-cli/lib/core.js::92

return Number(x.fid) === keyword || x.name === keyword || x.slug === keyword;
**** issue: command message blink
/usr/local/lib/node_modules/leetcode-cli/lib/plugins/leetcode.js

the var 'spin' is used to blink message.
change to 'console.log()'.
** DONE org-brain learn to use
   :LOGBOOK:
   CLOCK: [2020-02-14 Fri 10:01]--[2020-02-14 Fri 10:02] =>  0:01
   :END:
*** install
    [[https://github.com/Kungsgeten/org-brain][github page]]
*** usage
 [[https://www.youtube.com/watch?v=3gwdXkIHxjA][youtube video: concept mapping using org-brain]]

 1. entries
 ’org-brain-visualize’ prompts user for a name which is suggested to start with ’index’ as your top-level, and hang everything off ’index’.
 org-brain will then create ’index.org’ in your ’brain’ directory, and show you a visualization buffer.

 2. add children
 There are two ways to add a child to an entry. 
 One way, with ’c’, creates a file as a child. The filename can’t contain spaces, which is annoying but CamelCase works well enough. So let’s say you create ’Projects’ this way.
 The other way is with ’h’ (presumably for ’h’eadline), which creates an org-mode headline in your index (or other parent) file. The headline can contain any text, but nevertheless I think you should create files instead of headlines for most purposes.

 3. edit children
 So you can move the cursor to ’Projects’ and press enter, and then start entering a series of children for your Project node.

 4. add resource
 Pressing ’l’ will allow you to add a resource, or link, to the active node. The resource has to be in URL format. Org link format will not work. This is quite strange and somewhat annoying. So a file link has to be entered like this:

 file:///path/to/file/filename

 The link will appear in a “Resources” section at the bottom of the visualization diagram, and clicking on it or pressing Enter on it will open the resource.
** DONE snippet in spacemacs
   [2020-03-02 Mon 17:52]
 the repo of snippets for [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet]] can apply the "snippets" folder to [[~/.emacs.d/elpa/yasnippet-20191222.2206/snippets][target directory]] 
** DONE spacemacs configuration into org-mode
   CLOSED: [2020-07-02 Thu 18:51]
   :PROPERTIES:
   :ID:       2A4C0938-EACC-49E8-9194-FC3C1A9DE441
   :END:
   :LOGBOOK:
   CLOCK: [2020-03-05 Thu 10:51]--[2020-03-05 Thu 10:51] =>  0:00
   :END:
 [2020-03-05 Thu 10:51]

 [[~/Documents/Garage/orgible/spacemacs-babel.org][babel file]]

 =C-c C-v t= to output the configuration to .spacemacs.  (org-babel-tangle)

*** the errors when warnning
**** emu4

** latex
*** DONE latex online image
    CLOSED: [2020-03-17 Tue 16:10]
**** html code
#+BEGIN_EXPORT HTML
<video width="640" height="480" controls>
  <source src="/path/to/output_video.mp4" type="video/mp4">
</video>
#+END_EXPORT

**** write16
   #+begin_example
   % write18{wget http://www.some-site.com/path/to/image.png}
   \includegraphics{image.png}

   tex_engine: pdflatex --shell-escape test.tex
   #+end_example
**** externalfigure
   #+begin_example
   \externalfigure[http://www.site.com/path/to/figure.png]

   tex_engine: ConTeXt (LuaTeX)
   #+end_example
**** href
   #+begin_example
   % \href{http://somewhere.com/someplace/some.jpg}{\incudegraphics{some.jpg}}
   % \href{http://somewhere.com/someplace/some.jpg}{picture here}

   tex_engine: LuaTeX
   #+end_example

*** Bibtex
**** format

  https://wenku.baidu.com/view/0f2096643968011ca300916d.html

  1. @article条目为期刊或杂志上的一篇文章。
      不可少域author, title, journal, year.
      可省略域volume, number, pages, month, note.
  2. @book条目为有确定出版社的书籍。
      不可少域author或editor, title, publisher, year.
      可省略域volume或number, series, address, edition, month, note.
  3. @booklet条目为印制的有封皮的作品，但没有出版社或赞助机构的名称。
        不可少域title.
      可省略域author, howpublished, address, month, year, note.
  4. @conference与下面的@inproceedings相同。
  5. @inbook条目为一本书的一部分(章，节或某些页)。
      不可少域author或editor, title, chapter和/或pages, publisher,year.
      可省略域volume或number, series, type, address, edition, month, note.
  6. @incollection条目为一本书中有自己题目的一部分。
      不可少域author, title, booktitle, publisher, year.
      可省略域editor, volume或number, series, type, chapter, pages, address, edition, month, note.
  7. @inproceedings条目为会议论文集中的一篇文章。
      不可少域author, title, booktitle, year.
      可省略域editor, volume或number, series, pages, address, month, organization, publisher, note.
  8. @manual条目为科技文档。
        不可少域title.
      可省略域author, organization, address, edition, month, year, note.
  9. @mastersthesis条目为硕士论文。
      不可少域author, title, school, year.
      可省略域type, address, month, note.
  10. @misc条目为不属于其它任何类型的作品。
       不可少域没有。
         可省略域author, title, howpublished, month, year, note.
  11. @phdthesis条目为博士论文。
       不可少域author, title, school, year.
       可省略域type, address, month, note.
  12. @proceedings条目为会议论文集。
       不可少域title, year.
       可省略域editor,volume或number, series, address, month, organization, publisher, note.
  13. @techreport条目为学校或其它研究机构印制的报告。
       不可少域author, title, institution, year.
       可省略域type, number, address, month, note.
  14. @unpublished条目为有作者和标题的还未出版的作品。
       不可少域author, title, note.
       可省略域month, year.
  15. 在每项条目中还可以有可省略域key和crossref.

** org mode authoring system
   :PROPERTIES:
   :ID:       A420F6B3-2900-4227-8B94-B0ECF447AEB4
   :END:
*** template
**** latex
 Use =C-c C-e # latex= to insert latex options for org mode.
**** beamer
 The default org have no beamer template, add option below
#+begin_example
#+startup: beamer
#+end_example

The heading level for beamer exported. H:3 is also OK
#+begin_example
#+OPTIONS: H:2
#+BEAMER_HEADER: \AtBeginSection{\frame{\sectionpage}}
#+end_example

The common configurations:
#+begin_example
#+TITLE:  Documents and presentations with org-mode
#+AUTHOR: John Goerzen
#+BEAMER_HEADER: \institute{The Changelog}
#+PROPERTY: comments yes
#+PROPERTY: header-args :exports both :eval never-export
#+OPTIONS: H:2
#+BEAMER_THEME: CambridgeUS
#+BEAMER_COLOR_THEME: default
#+end_example

The layout:
#+begin_example
#+BEAMER_INNER_THEME: default
#+LaTeX_CLASS_OPTIONS: [aspectratio=169]
#+BEAMER_HEADER: \definecolor{links}{HTML}{0000A0}
#+BEAMER_HEADER: \hypersetup{colorlinks=,linkcolor=,urlcolor=links}
#+BEAMER_HEADER: \setbeamertemplate{itemize items}[default]
#+BEAMER_HEADER: \setbeamertemplate{enumerate items}[default]
#+BEAMER_HEADER: \setbeamertemplate{items}[default]
#+BEAMER_HEADER: \setbeamercolor*{local structure}{fg=darkred}
#+BEAMER_HEADER: \setbeamercolor{section in toc}{fg=darkred}
#+BEAMER_HEADER: \setlength{\parskip}{\smallskipamount}
#+end_example

the size ratio of beamer is set to 16:9 for "aspectratio=169"
**** html
 The html template can add the css file as following
 #+begin_example
 #+EXPORT_FILE_NAME: ../posts/template.html
 #+TITLE: Article Title Goes Here
 #+SUBTITLE: Article Sub-Title
 #+OPTIONS: toc:nil num:3 H:4 ^:nil pri:t
 #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../style/css/org.css"/>

 #+BEGIN_abstract
 Article abstract goes here.
 #+END_abstract

 # now prints out the previously disabled (toc:nil) table of contents.
 #+TOC: headlines 2
 Your content goes here.

 # * Refrences                                                          :ignore:
  
 # * Footnotes

 #+end_example

*** Chinese
 The org mode supports Chinese. Some exports files not. Like latex.

**** latex
 For latex only, the best practice is using ctexart class and UTF8 package and compiling with xelatex.
 Add the org options below:
 #+begin_example
 #+latex_class: ctexart
 #+latex_class_options: [UTF8]
 #+latex_header:
 #+latex_header_extra:
 #+description:
 #+keywords:
 #+subtitle:
 #+latex_compiler: xelatex
 #+date: \today
 #+end_example

 If latex engine is still not xelatex, set TeX-engine in the generated latex file.
 #  %%% Local Variables:
 , %%% coding: utf-8
 , %%% mode: latex
 , %%% TeX-engine: xetex
 , %%% End:
+begin_src latex
 #+end_src

**** beamer
 For latex beamer, the ctexart class no longer available.
 Alternately, specific the Chinese font and compile with pdflatex or xelatex.
 Add the org options below:
 #+begin_example
 #+TITLE:
 #+AUTHOR:
 #+EMAIL:
 #+DESCRIPTION:
 #+KEYWORDS:
 #+LANGUAGE:  en
 #+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
 #+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
 #+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
 #+EXPORT_SELECT_TAGS: export
 #+EXPORT_EXCLUDE_TAGS: noexport
 #+LINK_UP:
 #+LINK_HOME:
 #+XSLT:
 #+startup: beamer
 #+LATEX_CLASS: beamer
 #+BEAMER_FRAME_LEVEL: 3
 #+LaTeX_CLASS_OPTIONS: [xcolor=svgnames,bigger,presentation]
 #+LATEX_HEADER:\usepackage[orientation=landscape,size=custom,width=16,height=9,scale=0.5,debug]{beamerposter}\usecolortheme[named=FireBrick]{structure}\setbeamercovered{transparent}\setbeamertemplate{caption}[numbered]\setbeamertemplate{blocks}[rounded][shadow=true] \usetheme{Darmstadt} \usepackage{tikz}\usepackage{xeCJK}\usepackage{amsmath}\setmainfont{Times New Roman}\setCJKmainfont[BoldFont={Adobe Heiti Std},ItalicFont={Adobe Kaiti Std}]{Adobe Heiti Std}\setCJKsansfont{Adobe Heiti Std}\setCJKmonofont{Adobe Kaiti Std}\usepackage{verbatim}\institute{beamerinstitute} \graphicspath{{figures/}} \definecolor{lstbgcolor}{rgb}{0.9,0.9,0.9} \usepackage{listings} \usepackage{fancyvrb}\usepackage{xcolor}\lstset{escapeinside=`',frameround=ftft,language=C,breaklines=true,keywordstyle=\color{blue!70},commentstyle=\color{red!50!green!50!blue!50},frame=shadowbox,backgroundcolor=\color{yellow!20},rulesepcolor=\color{red!20!green!20!blue!20}}
 #+latex_compiler: xelatex
 #+end_example

 The level of subtree exported into beamer can be configured as the H:3 or BEAMER_FRAME_LEVEL:3.

*** export
 use =C-c C-e= and select desired format.
** org mode [[/Users/xin/Documents/Garage/orgible][workspace]]
*** DONE orgible repo configure
    CLOSED: [2020-03-30 Mon 11:45] SCHEDULED: <2020-03-30 Mon 15:00-17:00>
**** DONE org blog
     CLOSED: [2020-03-30 Mon 11:30]

   示例站点：https://www.rosecoder.com/
   文字教程：https://www.rosecoder.com/org-to-site-tutor.html
   页面展示：https://www.rosecoder.com/org-to-site.html
   论坛页面：https://emacs-china.org/t/org-mode-site-v0-0-1/11409
   file: [[~/Documents/Garage/orgible/elisp/init-site.el][init-site.el]]

   *finally abandon this!*
***** Custom
   head number: =num:nil= not show, =num:3= show 1.1.1 but no more
   add specific css file 'org-index.css' for index.html
**** DONE version control with git and nutstore
     CLOSED: [2020-03-30 Mon 11:45]
***** hierarchy
      - inbox.org for all org capture
      - refile/ folder to sort and collect finished notes
        + todo.org: todo list

        + job-hunting.org: information about job interview and code test
        + software.org: software knowledge
        + hardware.org: hardware knowledge

        + projects.org: project managemant

        + paper-notes.org: notes from Skim app

        + workflow.org: tool chains

        + topic.org: thinking and talking except work

      - oxrign/ folder to store private message
        + password
        + workstation
      - org-mode-blog/ folder for posting knowledge or interestings

***** sync
      nutstore sync orgible/ folder

      mobile app can use nutstore app or webdavs to get folder

***** version control
      - when capture, no vc
      - when refile, vc
      - when update blog, vc submodule org-mode-blog/
      - when private, vc submodule oxrign/
*** org mode video [[https://www.youtube.com/watch?v=PVsSOmUB7ic][Learn Emacs Org Mode: Spacemacs Intro Tutorial - YouTube]]
    :LOGBOOK:
    CLOCK: [2020-03-02 Mon 17:48]--[2020-03-02 Mon 17:52] =>  0:04
    CLOCK: [2020-03-02 Mon 17:36]--[2020-03-02 Mon 17:47] =>  0:11
    :END:
  [2020-03-02 Mon 17:36]

**** org capture and refile

     - capture the line and the file
     - refile to the todo list of tomorrow, show in agenda

**** insert snippet

     have no snippet in emacs.

**** shortkeys

     - new sibling: C-Enter
     - toggle global content: S-Tab
     - toggle focus: Space w c c
     - format: , x
     - vi comment package: y s w ~
     - paragraph selection: v a p
     - org column: C-c C-x C-c

**** agenda time last for 2 hours:

     14:00 + 2

**** org mobile

     orgzly

** DONE org notes
   CLOSED: [2020-03-28 Sat 20:40]
*** spacemacs org
**** snippet
***** insert

  [SPC] i s #

**** heading

  =, h i= insert heading
  =, h s= insert subheading
  = C [ENTER]= heading below with the same level

**** node

  =m-up= move node up
  =, n= narrow to subtree. no trigger narrow shortkeys, but =SPC n w= to widen and escape narrow.
  =SPC w C= center content. same trigger

**** format

  select content first and then use
  =, x b= for bold or anything else

***** vi yank

  =y s selection marker=
  selection including =w= for word
  marker including =*= for bold

  #+begin_example

  #+end_example

**** vi selection
***** around

  =v a e= select around environment
  =v a R= select around subtree. not work
  =d a p= delete around paragraph
  = a R :  align a subtree

**** iterm

     1. one
     2. two
        - sub one
        - sub two
     3. [ ] three

  continuous add new iterm below: =ESC o=

**** gtd
***** state

   =:set status
  =C-c ,= set priority. same as =S up= or =, J=
  =, P= set property

***** timestamp
  TIME+2 last 2 hours
  <2020-03-18 Wed 12:00-14:00>

  =S UP= change TIME

***** agenda

  =, a t= all the todos
  =, a a= all the entries

***** sort

  select and then =, ^= to sort according to option

***** sparse tree

  =, \= and select state of the file

***** clock

  go to last clock =C-c C-x C-j=

**** spreadsheet

  org-columns =C-c C-x C-c=

**** help

  =C-h i= and select org mode
** org agenda commands

 Commands in the Agenda Buffer

 Entries in the agenda buffer are linked back to the Org file or diary file where they originate. You are not allowed to edit the agenda buffer itself, but commands are provided to show and jump to the original entry location, and to edit the Org files “remotely” from the agenda buffer. In this way, all information is stored only once, removing the risk that your agenda and note files may diverge.

 Some commands can be executed with mouse clicks on agenda lines. For the other commands, point needs to be in the desired line.

 Motion

 n (org-agenda-next-line)
 Next line (same as DOWN and C-n).

 p (org-agenda-previous-line)
 Previous line (same as UP and C-p).

 View/Go to Org file

 SPC or mouse-3 (org-agenda-show-and-scroll-up)
 Display the original location of the item in another window. With a prefix argument, make sure that drawers stay folded.

 L (org-agenda-recenter)
 Display original location and recenter that window.

 TAB or mouse-2 (org-agenda-goto)
 Go to the original location of the item in another window.

 RET (org-agenda-switch-to)
 Go to the original location of the item and delete other windows.

 F (org-agenda-follow-mode)
 Toggle Follow mode. In Follow mode, as you move point through the agenda buffer, the other window always shows the corresponding location in the Org file. The initial setting for this mode in new agenda buffers can be set with the variable org-agenda-start-with-follow-mode.

 C-c C-x b (org-agenda-tree-to-indirect-buffer)
 Display the entire subtree of the current item in an indirect buffer. With a numeric prefix argument N, go up to level N and then take that tree. If N is negative, go up that many levels. With a C-u prefix, do not remove the previously used indirect buffer.

 C-c C-o (org-agenda-open-link)
 Follow a link in the entry. This offers a selection of any links in the text belonging to the referenced Org node. If there is only one link, follow it without a selection prompt.

 Change display

 A
 Interactively select another agenda view and append it to the current view.

 o
 Delete other windows.

 v d or short d (org-agenda-day-view)
 Switch to day view. When switching to day view, this setting becomes the default for subsequent agenda refreshes. A numeric prefix argument may be used to jump directly to a specific day of the year. For example, 32 d jumps to February 1st. When setting day view, a year may be encoded in the prefix argument as well. For example, 200712 d jumps to January 12, 2007. If such a year specification has only one or two digits, it is expanded into one of the 30 next years or the last 69 years.

 v w or short w (org-agenda-week-view)
 Switch to week view. When switching week view, this setting becomes the default for subsequent agenda refreshes. A numeric prefix argument may be used to jump directly to a specific day of the ISO week. For example 9 w to ISO week number 9. When setting week view, a year may be encoded in the prefix argument as well. For example, 200712 w jumps to week 12 in 2007. If such a year specification has only one or two digits, it is expanded into one of the 30 next years or the last 69 years.

 v m (org-agenda-month-view)
 Switch to month view. Because month views are slow to create, they do not become the default for subsequent agenda refreshes. A numeric prefix argument may be used to jump directly to a specific day of the month. When setting month view, a year may be encoded in the prefix argument as well. For example, 200712 m jumps to December, 2007. If such a year specification has only one or two digits, it is expanded into one of the 30 next years or the last 69 years.

 v y (org-agenda-year-view)
 Switch to year view. Because year views are slow to create, they do not become the default for subsequent agenda refreshes. A numeric prefix argument may be used to jump directly to a specific day of the year.

 v SPC (org-agenda-reset-view)
 Reset the current view to org-agenda-span.

 f (org-agenda-later)
 Go forward in time to display the span following the current one. For example, if the display covers a week, switch to the following week. With a prefix argument, repeat that many times.

 b (org-agenda-earlier)
 Go backward in time to display earlier dates.

 . (org-agenda-goto-today)
 Go to today.

 j (org-agenda-goto-date)
 Prompt for a date and go there.

 J (org-agenda-clock-goto)
 Go to the currently clocked-in task in the agenda buffer.

 D (org-agenda-toggle-diary)
 Toggle the inclusion of diary entries. See Weekly/daily agenda.

 v l or v L or short l (org-agenda-log-mode)
 Toggle Logbook mode. In Logbook mode, entries that were marked as done while logging was on (see the variable org-log-done) are shown in the agenda, as are entries that have been clocked on that day. You can configure the entry types that should be included in log mode using the variable org-agenda-log-mode-items. When called with a C-u prefix argument, show all possible logbook entries, including state changes. When called with two prefix arguments C-u C-u, show only logging information, nothing else. v L is equivalent to C-u v l.

 v [ or short [ (org-agenda-manipulate-query-add)
 Include inactive timestamps into the current view. Only for weekly/daily agenda.

 v a (org-agenda-archives-mode)
 Toggle Archives mode. In Archives mode, trees that are archived (see Internal archiving) are also scanned when producing the agenda. To exit archives mode, press v a again.

 v A
 Toggle Archives mode. Include all archive files as well.

 v R or short R (org-agenda-clockreport-mode)
 Toggle Clockreport mode. In Clockreport mode, the daily/weekly agenda always shows a table with the clocked times for the time span and file scope covered by the current agenda view. The initial setting for this mode in new agenda buffers can be set with the variable org-agenda-start-with-clockreport-mode. By using a prefix argument when toggling this mode (i.e., C-u R), the clock table does not show contributions from entries that are hidden by agenda filtering98. See also the variable org-clock-report-include-clocking-task.

 v c
 Show overlapping clock entries, clocking gaps, and other clocking problems in the current agenda range. You can then visit clocking lines and fix them manually. See the variable org-agenda-clock-consistency-checks for information on how to customize the definition of what constituted a clocking problem. To return to normal agenda display, press l to exit Logbook mode.

 v E or short E (org-agenda-entry-text-mode)
 Toggle entry text mode. In entry text mode, a number of lines from the Org outline node referenced by an agenda line are displayed below the line. The maximum number of lines is given by the variable org-agenda-entry-text-maxlines. Calling this command with a numeric prefix argument temporarily modifies that number to the prefix value.

 G (org-agenda-toggle-time-grid)
 Toggle the time grid on and off. See also the variables org-agenda-use-time-grid and org-agenda-time-grid.

 r (org-agenda-redo)
 g
 Recreate the agenda buffer, for example to reflect the changes after modification of the timestamps of items with S-LEFT and S-RIGHT. When the buffer is the global TODO list, a prefix argument is interpreted to create a selective list for a specific TODO keyword.

 C-x C-s or short s (org-save-all-org-buffers)
 Save all Org buffers in the current Emacs session, and also the locations of IDs.

 C-c C-x C-c (org-agenda-columns)
 Invoke column view (see Column View) in the agenda buffer. The column view format is taken from the entry at point, or, if there is no entry at point, from the first entry in the agenda view. So whatever the format for that entry would be in the original buffer (taken from a property, from a ‘COLUMNS’ keyword, or from the default variable org-columns-default-format) is used in the agenda.

 C-c C-x > (org-agenda-remove-restriction-lock)
 Remove the restriction lock on the agenda, if it is currently restricted to a file or subtree (see Agenda Files).

 M-UP (org-agenda-drag-line-backward)
 Drag the line at point backward one line. With a numeric prefix argument, drag backward by that many lines.

 Moving agenda lines does not persist after an agenda refresh and does not modify the contributing Org files.

 M-DOWN (org-agenda-drag-line-forward)
 Drag the line at point forward one line. With a numeric prefix argument, drag forward by that many lines.

 Remote editing

 0--9
 Digit argument.

 C-_ (org-agenda-undo)
 Undo a change due to a remote editing command. The change is undone both in the agenda buffer and in the remote buffer.

 t (org-agenda-todo)
 Change the TODO state of the item, both in the agenda and in the original Org file. A prefix arg is passed through to the org-todo command, so for example a C-u prefix are will trigger taking a note to document the state change.

 C-S-RIGHT (org-agenda-todo-nextset)
 Switch to the next set of TODO keywords.

 C-S-LEFT, org-agenda-todo-previousset
 Switch to the previous set of TODO keywords.

 C-k (org-agenda-kill)
 Delete the current agenda item along with the entire subtree belonging to it in the original Org file. If the text to be deleted remotely is longer than one line, the kill needs to be confirmed by the user. See variable org-agenda-confirm-kill.

 C-c C-w (org-agenda-refile)
 Refile the entry at point.

 C-c C-x C-a or short a (org-agenda-archive-default-with-confirmation)
 Archive the subtree corresponding to the entry at point using the default archiving command set in org-archive-default-command. When using the a key, confirmation is required.

 C-c C-x a (org-agenda-toggle-archive-tag)
 Toggle the archive tag (see Internal archiving) for the current headline.

 C-c C-x A (org-agenda-archive-to-archive-sibling)
 Move the subtree corresponding to the current entry to its archive sibling.

 C-c C-x C-s or short $ (org-agenda-archive)
 Archive the subtree corresponding to the current headline. This means the entry is moved to the configured archive location, most likely a different file.

 T (org-agenda-show-tags)
 Show all tags associated with the current item. This is useful if you have turned off org-agenda-show-inherited-tags, but still want to see all tags of a headline occasionally.

 : (org-agenda-set-tags)
 Set tags for the current headline. If there is an active region in the agenda, change a tag for all headings in the region.

 , (org-agenda-priority)
 Set the priority for the current item. Org mode prompts for the priority character. If you reply with SPC, the priority cookie is removed from the entry.

 + or S-UP (org-agenda-priority-up)
 Increase the priority of the current item. The priority is changed in the original buffer, but the agenda is not resorted. Use the r key for this.

 - or S-DOWN (org-agenda-priority-down)
 Decrease the priority of the current item.

 C-c C-z or short z (org-agenda-add-note)
 Add a note to the entry. This note is recorded, and then filed to the same location where state change notes are put. Depending on org-log-into-drawer, this may be inside a drawer.

 C-c C-a (org-attach)
 Dispatcher for all command related to attachments.

 C-c C-s (org-agenda-schedule)
 Schedule this item. With a prefix argument, remove the scheduling timestamp

 C-c C-d (org-agenda-deadline)
 Set a deadline for this item. With a prefix argument, remove the deadline.

 S-RIGHT (org-agenda-do-date-later)
 Change the timestamp associated with the current line by one day into the future. If the date is in the past, the first call to this command moves it to today. With a numeric prefix argument, change it by that many days. For example, 3 6 5 S-RIGHT changes it by a year. With a C-u prefix, change the time by one hour. If you immediately repeat the command, it will continue to change hours even without the prefix argument. With a double C-u C-u prefix, do the same for changing minutes. The stamp is changed in the original Org file, but the change is not directly reflected in the agenda buffer. Use r or g to update the buffer.

 S-LEFT (org-agenda-do-date-earlier)
 Change the timestamp associated with the current line by one day into the past.

 > (org-agenda-date-prompt)
 Change the timestamp associated with the current line. The key > has been chosen, because it is the same as S-. on my keyboard.

 I (org-agenda-clock-in)
 Start the clock on the current item. If a clock is running already, it is stopped first.

 O (org-agenda-clock-out)
 Stop the previously started clock.

 X (org-agenda-clock-cancel)
 Cancel the currently running clock.

 J (org-agenda-clock-goto)
 Jump to the running clock in another window.

 k (org-agenda-capture)
 Like org-capture, but use the date at point as the default date for the capture template. See org-capture-use-agenda-date to make this the default behavior of org-capture.

 Bulk remote editing selected entries

 m (org-agenda-bulk-mark)
 Mark the entry at point for bulk action. If there is an active region in the agenda, mark the entries in the region. With numeric prefix argument, mark that many successive entries.

 =*= (org-agenda-bulk-mark-all)
 Mark all visible agenda entries for bulk action.

 u (org-agenda-bulk-unmark)
 Unmark entry for bulk action.

 U (org-agenda-bulk-remove-all-marks)
 Unmark all marked entries for bulk action.

 M-m (org-agenda-bulk-toggle)
 Toggle mark of the entry at point for bulk action.

 M-* (org-agenda-bulk-toggle-all)
 Toggle mark of every entry for bulk action.

 % (org-agenda-bulk-mark-regexp)
 Mark entries matching a regular expression for bulk action.

 B (org-agenda-bulk-action)
 Bulk action: act on all marked entries in the agenda. This prompts for another key to select the action to be applied. The prefix argument to B is passed through to the s and d commands, to bulk-remove these special timestamps. By default, marks are removed after the bulk. If you want them to persist, set org-agenda-bulk-persistent-marks to t or hit p at the prompt.

 p
 Toggle persistent marks.

 $
 Archive all selected entries.

 A
 Archive entries by moving them to their respective archive siblings.

 t
 Change TODO state. This prompts for a single TODO keyword and changes the state of all selected entries, bypassing blocking and suppressing logging notes—but not timestamps.

 +
 Add a tag to all selected entries.

 -
 Remove a tag from all selected entries.

 s
 Schedule all items to a new date. To shift existing schedule dates by a fixed number of days, use something starting with double plus at the prompt, for example ‘++8d’ or ‘++2w’.

 d
 Set deadline to a specific date.

 r
 Prompt for a single refile target and move all entries. The entries are no longer in the agenda; refresh (g) to bring them back.

 S
 Reschedule randomly into the coming N days. N is prompted for. With a prefix argument (C-u B S), scatter only across weekdays.

 f
 Apply a function99 to marked entries. For example, the function below sets the ‘CATEGORY’ property of the entries to ‘web’.

 (defun set-category ()
   (interactive "P")
   (let ((marker (or (org-get-at-bol 'org-hd-marker)
                     (org-agenda-error))))
     (org-with-point-at marker
       (org-back-to-heading t)
       (org-set-property "CATEGORY" "web"))))
 Calendar commands

 c (org-agenda-goto-calendar)
 Open the Emacs calendar and go to the date at point in the agenda.

 c (org-calendar-goto-agenda)
 When in the calendar, compute and show the Org agenda for the date at point.

 i (org-agenda-diary-entry)
 Insert a new entry into the diary, using the date at point and (for block entries) the date at the mark. This adds to the Emacs diary file100, in a way similar to the i command in the calendar. The diary file pops up in another window, where you can add the entry.

 If you configure org-agenda-diary-file to point to an Org file, Org creates entries in that file instead. Most entries are stored in a date-based outline tree that will later make it easy to archive appointments from previous months/years. The tree is built under an entry with a ‘DATE_TREE’ property, or else with years as top-level entries. Emacs prompts you for the entry text—if you specify it, the entry is created in org-agenda-diary-file without further interaction. If you directly press RET at the prompt without typing text, the target file is shown in another window for you to finish the entry there. See also the k r command.

 M (org-agenda-phases-of-moon)
 Show the phases of the moon for the three months around current date.

 S (org-agenda-sunrise-sunset)
 Show sunrise and sunset times. The geographical location must be set with calendar variables, see the documentation for the Emacs calendar.

 C (org-agenda-convert-date)
 Convert the date at point into many other cultural and historic calendars.

 H (org-agenda-holidays)
 Show holidays for three months around point date.

 Quit and exit

 q (org-agenda-quit)
 Quit agenda, remove the agenda buffer.

 x (org-agenda-exit)
 Exit agenda, remove the agenda buffer and all buffers loaded by Emacs for the compilation of the agenda. Buffers created by the user to visit Org files are not removed

** DONE org mode gtd
   CLOSED: [2020-07-02 Thu 18:51]
 http://doc.norang.ca/org-mode.html
**** clock in
     :LOGBOOK:
     CLOCK: [2020-07-02 Thu 17:38]--[2020-07-02 Thu 17:39] =>  0:01
     :END:
 (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
**** DONE block agenda
     CLOSED: [2020-07-02 Thu 18:51]
     :LOGBOOK:
     CLOCK: [2020-07-02 Thu 17:43]--[2020-07-02 Thu 17:44] =>  0:01
     :END:
 Tasks to refile are in their own section of the block agenda. To find tasks to refile I run my agenda view with F12 SPC and scroll down to second section of the block agenda: Tasks to Refile. This view shows all tasks (even ones marked in a done state).

 Bulk refiling in the agenda works very well for multiple tasks going to the same place. Just mark the tasks with m and then B r to refile all of them to a new location. Occasionally I'll also refile tasks as subtasks of the current clocking task using C-2 C-c C-w from the refile.org file.

 Refiling all of my tasks tends to take less than a minute so I normally do this a couple of times a day.
**** agenda day view
 If I want just today's calendar view then F12 a is still faster than generating the block agenda - especially if I want to view a week or month's worth of information, or check my clocking data. In that case the extra detail on the block agenda view is never really needed and I don't want to spend time waiting for it to be generated.
**** agenda project view
 After selecting a project (with P on any task in the agenda) the block agenda changes to show the project and any subprojects in the Projects section. Tasks show project-related tasks that are hidden when not narrowed to a project.
**** top-down
 I generally work top-down on the agenda. Things with deadlines and scheduled dates (planned to work on today or earlier) show up in the agenda at the top.

 My day goes generally like this:

 - Punch in (this starts the clock on the default task)
   - Look at the agenda and make a mental note of anything important to deal with today
   - Read email and news
   - create notes, and tasks for things that need responses with org-capture
   - Check refile tasks and respond to emails
 - Look at my agenda and work on important tasks for today
   - Clock it in
   - Work on it until it is DONE or it gets interrupted
 - Work on tasks
 - Make journal entries (C-c c j) for interruptions
 - Punch out for lunch and punch back in after lunch
 - work on more tasks
 - Refile tasks to empty the list
   - Tag tasks to be refiled with m collecting all tasks for the same target
   - Bulk refile the tasks to the target location with B r
   - Repeat (or refile individually with C-c C-w) until all refile tasks are gone
 - Mark habits done today as DONE
 - Punch out at the end of the work day

 Start with deadlines and tasks scheduled today or earlier from the daily agenda view. Then move on to tasks in the Next Tasks list in the block agenda view. I tend to schedule current projects to 'today' when I start work on them and they sit on my daily agenda reminding me that they need to be completed. I normally only schedule one or two projects to the daily agenda and unschedule things that are no longer important and don't deserve my attention today.
**** new task
 When I look for a new task to work on I generally hit F12 SPC to get the block agenda and follow this order:

 - Pick something off today's agenda
   - deadline for today (do this first - it's not late yet)
   - deadline in the past (it's already late)
   - a scheduled task for today (it's supposed to be done today)
 - a scheduled task that is still on the agenda
 - deadline that is coming up soon
 - pick a NEXT task

 If you run out of items to work on look for a NEXT task in the current context pick a task from the Tasks list of the current project.
**** a NEXT task
 A NEXT task is something that *is available to work on now* , it is the next logical step in some project.
 Having an agenda view that shows NEXT tasks makes it easy to pick the thing to clock - and I don't have to remember if I need to look in the ONGOING list or the NEXT list when looking for the task to clock-in.
 The NEXT list is basically 'what is current' - any task that moves a project forward. I want to find the thing to work on as fast as I can and actually do work on it - not spend time hunting through my org files for the task that needs to be clocked-in.
**** email
 If there are emails that require a response I use org-capture to create a new task with a heading of 'Respond to <user>' for each one. This automatically links to the email in the task and makes it easy to find later.
 The capture template for Repond To tasks is now scheduled for today so I can refile the task to the appropriate org file without losing the task for a week.
 Next, I go to my newly created tasks to be refiled from the block agenda with F12 a and clock in an email task and deal with it. Repeat this until all of the 'Respond to <user>' tasks are marked DONE.
**** note
 If an article has a useful piece of information I want to remember I create a note for it with C-c c n and enter the topic and file it. This takes practically no time at all and I know the note is safely filed for later retrieval. The time I spend in the capture buffer is clocked with that capture note.
**** small task
 I need to find small tasks that I can knock off the list.

 How do we do this? Get a list of NEXT tasks from the block agenda and then narrow it down with filtering. Tasks are ordered in the NEXT agenda view by estimated effort so the short tasks are first – just start at the top and work your way down.
 I can limit the displayed agenda tasks to those estimates of 10 minutes or less with / + 1 and I can pick something that fits the minutes I have left before I take off for lunch.
**** / RET
 I need to stop working on these immediately. I put the project task on HOLD and work on something else. The / RET filter removes HOLD tasks and subtasks (because of tag inheritance).

 At home I have some tasks tagged with farm since these need to be performed when I am physically at our family farm. Since I am there infrequently I have added farm to the list of auto-excluded tags on my system. I can always explicitly filter to just farm tasks with / TAB farm RET when I am physically there.
**** punch in and out
 Without clocking data it's hard to tell how long something took to do after the fact.
 I now use the concept of punching in and punching out at the start and end of my work day. I punch in when I arrive at work, punch out for lunch, punch in after lunch, and punch out at the end of the day. Every minute is clocked between punch-in and punch-out times.

 Punching in defines a default task to clock time on whenever the clock would normally stop. I found that with the default org-mode setup I would lose clocked minutes during the day, a minute here, a minute there, and that all adds up. This is especially true if you write notes when moving to a DONE state - in this case the clock normally stops before you have composed the note – and good notes take a few minutes to write.
**** clock setup
 My clocking setup basically works like this:

 - Punch in (start the clock)
   - This clocks in a predefined task by org-id that is the default task to clock in whenever the clock normally stops
 - Clock in tasks normally, and let moving to a DONE state clock out
 - clocking out automatically clocks time on a parent task or moves back to the predefined default task if no parent exists.
 - Continue clocking whatever tasks you work on
 - Punch out (stop the clock)

 I'm free to change the default task multiple times during the day but with the clock moving up the project tree on clock out I no longer need to do this. I simply have a single task that gets clocked in when I punch-in.

 If I punch-in with a prefix on a task in Project X then that task automatically becomes the default task and all clocked time goes on that project until I either punch out or punch in some other task.
**** clock in and out
 If I am working on some task, then I simply clock in on the task. Clocking out moves the clock up to a parent task with a todo keyword (if any) which keeps the clock time in the same subtree. If there is no parent task with a todo keyword then the clock moves back to the default clocking task until I punch out or clock in some other task. When an interruption occurs I start a capture task which keeps clocked time on the interruption task until I close it with C-c C-c.
 Clocking out will now clock in the parent task (if there is one with a todo keyword) or clock in the default task if not parent exists.
 Keeping the clock running when moving a subtask to a DONE state means clocking continues to apply to the project task. I can pick the next task from the parent and clock that in without losing a minute or two while I'm deciding what to work on next.
**** clock example
 For example, consider the following org file:
 #+begin_src org
 - TODO Project A
 -- NEXT TASK 1
 -- TODO TASK 2
 -- TODO TASK 3
 - Tasks
 -- TODO Some miscellaneous task
 #+end_src
 I'll work on this file in the following sequence:

 I punch in with F9-I at the start of my day
 That clocks in the Organization task by id in my todo.org file.

 F12-SPC to review my block agenda
 Pick 'TODO Some miscellaneous task' to work on next and clock that in with I The clock is now on 'TODO Some miscellaneous task'

 I complete that task and mark it done with C-c C-t d
 This stops the clock and moves it back to the Organization task.

 Now I want to work on Project A so I clock in Task 1
 I work on Task 1 and mark it DONE. This clocks out Task 1 and moves the clock to Project A. Now I work on Task 2 and clock that in.

 The entire time I'm working on and clocking some subtask of Project A all of the clock time in the interval is applied somewhere to the Project A tree. When I eventually mark Project A done then the clock will move back to the default organization task.
**** clock command
 When I start or continue working on a task I clock it in with any of the following:

 C-c C-x C-i
 I in the agenda
 I speed key on the first character of the heading line
 f9 I while on the task in the agenda
 f9 I while in the task in an org file
**** clock small task
 While reorganizing my org-files, reading email, clearing my inbox, and doing other planning work that isn't for a specific project I'll clock in this task.
**** clock history
 Clock history selection buffer for C-u C-c C-x C-i
**** interupt
 If it's a one-shot uninteresting task (like a coffee break) I create a capture journal entry for it that goes to the diary.org date tree. If it's a task that actually needs to be tracked and marked done, and applied to some project then I create a capture task instead which files it in refile.org.
**** agenda log mode
 To visit the clock line for an entry quickly use the agenda log mode. F12 a l shows all clock lines for today. I use this to navigate to the appropriate clock lines quickly. F11 goes to the current clocked task but the agenda log mode is better for finding and visiting older clock entries.
 I always check that I haven't created task overlaps when fixing time clock entries by viewing them with log mode on in the agenda. There is a new view in the agenda for this – just hit v c in the daily agenda and clock gaps and overlaps are identified.
**** bill clock
 If you have a clocked time with an entry that is not closed (ie. it has no end time) then that is a hole in your clocked day and it gets counted as zero (0) for time spent on the task when generating clock reports. Counting it as zero is almost certainly wrong.

 To check for unclosed clock times I use the agenda-view clock check (v c in the agenda). This view shows clocking gaps and overlaps in the agenda.
**** month agenda
 To check the last month's clock data I use F12 a v m b v c which shows a full month in the agenda, moves to the previous month, and shows the clocked times only. It's important to remove any agenda restriction locks and filters when checking the logs for gaps and overlaps.
**** clock table
 Save your original estimate by creating a dynamic clock report table at the top of your estimated project subtree. Entering C-c C-x i RET inserts a clock table report with your estimated values and any clocked time to date.
 Column view is great for reviewing your estimate. This shows your estimated time value and the total clock time for the project side-by-side.

 Creating a dynamic clock table with C-c C-x i RET is a great way to save this project review if you need to make it available to other applications.

 C-c C-x C-d also provides a quick summary of clocked time for the current org file.

**** report
 To generate the report I pull up the agenda for the appropriate time frame (today, yesterday, this week, or last week) and hit the key sequence l R to add the log report (without clocking data lines) and the agenda clock report at the end.

 Then it's simply a matter of exporting the resulting agenda in some useful format to provide to other people. C-x C-w /tmp/agenda.html RET exports to HTML and C-x C-w /tmp/agenda.txt RET exports to plain text. Other formats are available but I use these two the most.

 Combining this export with tag filters and C-u R can limit the report to exactly the tags that people are interested in.
**** Note
 Notes are created with a NOTE tag already applied by the capture template so I'm free to refile the note anywhere. As long as the note is in a project file that contributes to my agenda (ie. in org-agenda-files) then I can find the note back easily with my notes agenda view by hitting the key combination F12 N. I'm free to limit the agenda view of notes using standard agenda tag filtering.
* Tools
** manim
*** Install
**** dependency
 #+begin_src shell
 brew install python3 cairo ffmpeg sox mactex
 pip3 install ffmpeg pycairo sox latx manimlib virtualenv manim manimlib
 cd ~/Donwnload
 git clone https://github.com/3b1b/manim.git
 cd manim
 pip3 install -r requirements.txt
 python3 extract_scene.py example_scenes.py WriteStuff -pl
 #+end_src

*** Tutorial
 [[file:~/Documents/Garage/log/knowledge/manim.org][manim-tutorial]]
** Alfred
*** URL

 app-name://target-link

*** help

 - ?search-object
 - ?hotkey
 - ?keyword

*** browser file

 - 'file-name
 - dir-name
 - open file-name
 - f file-name: show file in finder
 - in file-content: find content text
 - tag tag-name: show tags
 After get the index of the target, =Option + Command + \= or =Option + Control= give the basic operations, =Option + Shift= quick view.

** DONE Debug
   CLOSED: [2020-07-01 Wed 12:24] SCHEDULED: <2020-04-20 Mon 14:00-17:00>
*** LLDB

    [[https://blog.csdn.net/a184251289/article/details/98670441?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-2][LLDB浅析]]

**** configure file

 ~/.lldbinit

**** print

 - p: print value
 - po: print object(description of obj)
 - call: for function without return value
 - display: p val when stop

**** expression

 - e: declear new var
   e int a = 1
 - e: change value
   e a = 2
 - e: call function
   e sub-func arguments

**** image

 - image: look for error location according to error address
   image -lookup

**** breakpoint

 br is breakpoint; b is _regexp-break.
 - b: stop at file and line
   b filename line-number
 - b: stop at function
   b func-name
 - b: edit breakpoint list
   b delete/disable/enable
 - watchpoint:
   wa s v var
   wa modify -c "(var==1)"

**** flow

 - c: continue to breakpoint
 - n: step over
 - s: step in for source code
 - si: step inst for thread action
 - finish: step out for frame to jump out a function
 - return: jump out a function and return value
   return 2
 - until: run to line inside current func
   until 10

**** stack

 - frame: variables of current function
   f variable
   f variable var-name
 - frame: variables of another function
   f select 1
 - target: global variables
   ta v
   ta v global-var-name

**** thread

 - bt: show all thread and stack
   bt
   bt all

**** lib

 - image: show executable and shared library
   image list
 - image: find error location
   im lookup -a 0x1ec4

** Finder preview enhance
https://github.com/sindresorhus/quick-look-plugins
*** install
brew cask install qlcolorcode qlstephen qlmarkdown quicklook-json qlimagesize suspicious-package quicklookase qlvideo
xattr -r ~/Library/QuickLook
*** uninstall
xattr -d -r com.apple.quarantine ~/Library/QuickLook
