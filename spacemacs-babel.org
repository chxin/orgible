#+name: dot_spacemacs_generater
#+PROPERTY: header-args :tangle "spacemacs-dot-files"
#+begin_src emacs-lisp :tangle yes

;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

;; ==== evim mode
;; (setq-default evil-disable-insert-state-bindings t)

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the

   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 't
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     ruby
     yaml
     javascript
     windows-scripts
     octave
     html
     speed-reading
     (python :variables
             python-test-runner '(pytest nose)
             python-enable-yapf-format-on-save t)
     markdown
     myleetcode
     (latex :variables
            latex-build-command "LatexMk"
            latex-enable-auto-fill t
            latex-enable-folding t)
     pdf-tools
     bibtex
     (c-c++ :variables
            c-c++-enable-clang-support t
            c-c++-default-mode-for-headers 'c++-mode)
     helm
     ;; semantic
     ;; cscope
     (auto-completion :variables
                      auto-completion-enable-sort-by-usage t
                      auto-completion-enable-snippets-in-popup t)
     better-defaults
     emacs-lisp
     git
     ;; ox-ioslide
     (org :variables
          org-enable-github-support t
          org-enable-bootstrap-support t
          org-enable-org-journal-support t
          org-enable-sticky-header t
          org-enable-epub-support t
          org-enable-reveal-js-support t)
     (shell :variables
            shell-default-height 30
            shell-default-position 'bottom)
     spell-checking
     syntax-checking
     version-control
     (mu4e :variables
           mu4e-account-alist t
           mu4e-enable-notifications t
           mu4e-installation-path "/usr/local/Cellar/mu/1.2.0_1/share/emacs/site-lisp/mu/mu4e")
     (elfeed :variables
             ;; elfeed-enable-web-interface t
             rmh-elfeed-org-files (list
                                   "~/Documents/Garage/orgible/elfeed.org"
                                   ))
	 )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages
   '(
     org-brain
     ;; org-yt
     ;; org-id
     ;; org-noter
     ;; demo-it
     ;; notmuch
     ;; gud-lldb
     )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '()
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only expl icitly used packages and uninstall any
   ;; unused packages as well as their unused dependencies.
   ;; `used-but-keep-unused' installs only the used packages but won't uninstall
   ;; them if they become unused. `all' installs *all* packages supported by
   ;; Spacemacs and never uninstall them. (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update t
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'.
   dotspacemacs-elpa-subdirectory nil
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'hybrid
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'random
   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'."
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 3)
                                (agenda . 3))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(
                         dichromacy
                         leuven
                         )
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Menlo" ;;Menlo
                               :size 19
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'original
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar nil
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   ;; dotspacemacs-line-numbers `relative
   dotspacemacs-line-numbers '(:relative t
                                         :disabled-for-modes
                                         dired-mode
                                         demo-it-mode
                                         doc-view-mode
                                         org-present-mode
                                         markdown-mode
                                         ;; org-mode
                                         pdf-view-mode
                                         text-mode
                                         :size-limit-kb 1000)
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'origami
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup 'changed
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init', before layer configuration
executes.
 This function is mostly useful for variables that need to be set
before packages are loaded. If you are unsure, you should try in setting them in
`dotspacemacs/user-config' first."
  (setq configuration-layer--elpa-archives
        '(("melpa-cn" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ("org-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")
          ("gnu-cn"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")))
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
This function is called at the very end of Spacemacs initialization after
layers configuration.
This is the place where most of your configurations should be done. Unless it is
explicitly specified that a variable should be set before a package is loaded,
you should place your code here."
  ;; ==== spell check
  (add-hook 'prog-mode-hook #'flyspell-prog-mode)

  ;; ==== js file mode
  (add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))
  ;; hooks for js file format
  (defun chxin/js-mode-hook ()
    (setq js2-basic-offset 2)
    (setq js-indent-level 2)
    (setq js2-include-node-externs t)
    (setq js2-strict-missing-semi-warning nil))
  (add-hook 'js2-mode-hook 'chxin/js-mode-hook)
  (defun chxin/strip-html-tags ()
    "Remove HTML tags from the current buffer,
   (this will affect the whole buffer regardless of the restrictions in effect)."
    (interactive "*")
    (save-excursion
      (save-restriction
        (widen)
        (goto-char (point-min))
        (while (re-search-forward "<[^<]*>" (point-max) t)
          (replace-match "\\1"))
        (goto-char (point-min))
        (replace-string "&quot;" "\"")
        (goto-char (point-min))
        (replace-string "&nbsp;" " ")
        (goto-char (point-min))
        (replace-string "&copy;" "(c)")
        (goto-char (point-min))
        (replace-string "&amp;" "&")
        (goto-char (point-min))
        (replace-string "&lt;" "<")
        (goto-char (point-min))
        (replace-string "&gt;" ">")
        (goto-char (point-min))
        (replace-string "&#39;" "'")
        (goto-char (point-min))
        (delete-trailing-whitespace)
        )))

  ;; ==== c and cpp file mode
  ;; == clang
  ;; Bind clang-format-region to C-M-tab in all modes:
  (global-set-key [C-M-tab] 'clang-format-region)
  ;; Bind clang-format-buffer to tab on the c++-mode only:
  (add-hook 'c++-mode-hook 'clang-format-bindings)
  (defun clang-format-bindings ()
    (define-key c++-mode-map [tab] 'clang-format-buffer))
  ;; Add header file path
  ;; == indent
  (setq c-default-style "k&r")
  (setq c-basic-offset 4)
  ;; == format code when saving according to the .clang-format file
  ;; (defun clang-format-buffer-smart ()
  ;;   "reformat buffer if .clang-format exists in the projectile root."
  ;;   (when (f-exists? (expand-file-name ".clang-format" (projectile-project-root)))
  ;;     (clang-format-buffer)))
  ;; (defun clang-format-buffer-smart-on-save ()
  ;;   "add auto-save hook for clang-format-buffer-smart."
  ;;   (add-hook 'before-save-hook 'clang-format-buffer-smart nil t))
  ;; (spacemacs/add-to-hooks 'clang-format-buffer-smart-on-save
  ;;                         '(c-mode-hook c++-mode-hook))

  ;; ==== leetcode mode
  (setq-default leetcode-prefer-language "cpp")
  (setq-default leetcode-prefer-sql "mysql")

  ;; ==== org mode
	;; code format
	(setq-default indent-tabs-mode nil)
	(setq default-tab-width 4)
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
  ;; == org present
  ;; org present mode must hide the line number
  ;; (add-hook 'org-present-mode-hook (lambda () (linum-relative-on)))
  ;; dotspacemacs-line-numbers `relative
  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (toggle-frame-fullscreen)
                   (linum-relative-off)
                   (org-present-big)
                   ;; (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (toggle-frame-fullscreen)
                   (linum-relative-on)
                   (org-present-small)
                   ;; (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write)))))
  ;; options for org present: font size & subtree depth
  (setq-default org-present-text-scale 3)
  (setq-default org-present-level-depth 3)
  ;; == capture template
  ;; (setq org-capture-templates
  ;;       '(("l" "WPI" entry (file+headline "~/Documents/Garage/log/gtd/wpi.org" "work log")
  ;;          "* LOG %^T\n** Work%? \n** Plan\n** Issue")
  ;;         ("m" "MEMO" entry (file+headline "~/Documents/Garage/log/gtd/memo.org" "materials")
  ;;          "")
  ;;         ("i" "INBOX" entry (file+headline "~/Documents/Garage/log/gtd/inbox.org" "tasks")
  ;;          "** TODO %? %T")))
  ;; (global-set-key (kbd "C-c c") 'org-capture)
  ;; (spacemacs/set-leader-keys "C f" 'org-capture-goto-target)
  (setq org-directory "~/Documents/Garage/orgible")
  (setq org-default-notes-file "~/Documents/Garage/orgible/inbox.org")
  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
  (setq org-capture-templates
        (quote (("t" "Todo" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("r" "Respond" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
                ("n" "Note" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("i" "Interrupt" entry (file+datetree "~/Documents/Garage/orgible/inbox.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("w" "Review" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* TODO Review %c\t%F\n%U\n" :immediate-finish t)
                ("m" "Meeting" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("p" "Phone Call" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "~/Documents/Garage/orgible/inbox.org")
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
  ;; Remove empty LOGBOOK drawers on clock out
  ;; (defun bh/remove-empty-drawer-on-clock-out ()
  ;;   (interactive)
  ;;   (save-excursion
  ;;     (beginning-of-line 0)
  ;;     (org-remove-empty-drawer-at "LOGBOOK" (point))))
  ;; (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
  ;; == org refile
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  ;; Use IDO for both buffer and file completion and ido-everywhere to t
  ;; (setq org-completion-use-ido t)
  ;; (setq ido-everywhere t)
  ;; (setq ido-max-directory-size 100000)
  ;; (ido-mode (quote both))
  ;; (setq ido-default-file-method 'selected-window)
  ;; (setq ido-default-buffer-method 'selected-window)
  (setq org-indirect-buffer-display 'current-window)
  ;; exclude done state tasks from refile targets
  (defun bh/verify-refile-target ()
    "exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
  ;; == org todo keyword
  ;;; "@" to add comments
  ;;; "!" to add timestamp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "SCHEDULE(s)" "DEADLINE(d)" "WAITING(w@)" "HOLD(h@/!)" "|" "CANCELLED(c@)" "FINISHED(n!)" "PHONE" "MEETING"))))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("FINISHED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING") ("HOLD" . t))
                ("DONE" ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
  ;; skip setting timestamps and entering notes when use s-left and s-right
  (setq org-treat-s-cursor-todo-selection-as-state-change nil)
  ;; == org agenda
  (setq org-agenda-dim-blocked-tasks nil)
  (setq org-agenda-compact-blocks t)
  ;; set org agenda file
  (if (boundp 'org-user-agenda-files)
      (setq org-agenda-files org-user-agenda-files)
    (setq org-agenda-files (quote ("~/Documents/Garage/orgible/inbox.org"
                                   "~/Documents/Garage/orgible/refile/"
                                   "~/Documents/Garage/orgible/oxrign/"))))
  ;; custom agenda command definitions
  (defvar bh/hide-scheduled-and-waiting-next-tasks t)
  (setq org-agenda-custom-commands
        (quote (("n" "notes" tags "note"
                 ((org-agenda-overriding-header "notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "habits" tags-todo "style=\"habit\""
                 ((org-agenda-overriding-header "habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "agenda"
                 ((agenda "" nil)
                  (tags "refile"
                        ((org-agenda-overriding-header "tasks to refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-cancelled/!"
                             ((org-agenda-overriding-header "stuck projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-hold-cancelled/!"
                             ((org-agenda-overriding-header "projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-cancelled/!next"
                             ((org-agenda-overriding-header (concat "project next tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including waiting and scheduled tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-refile-cancelled-waiting-hold/!"
                             ((org-agenda-overriding-header (concat "project subtasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including waiting and scheduled tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-refile-cancelled-waiting-hold/!"
                             ((org-agenda-overriding-header (concat "standalone tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including waiting and scheduled tasks)")))
                              (org-agenda-skip-function 'bh/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-cancelled+waiting|hold/!"
                             ((org-agenda-overriding-header (concat "waiting and postponed tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including waiting and scheduled tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-refile/"
                        ((org-agenda-overriding-header "tasks to archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
  (defun bh/org-auto-exclude-function (tag)
    "automatic task exclusion in the agenda with / ret"
    (and (cond
          ((string= tag "hold")
           t)
          ((string= tag "farm")
           t))
         (concat "-" tag)))
  (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)
  ;; == org projectile
  (setq org-projectile-projects-file
        "~/Documents/Garage/orgible/refile/projects.org")
  ;; (with-eval-after-load 'org-projectile
    ;; (push (org-projectile-project-todo-entry) org-capture-templates)
    ;;   (push (org-projectile-project-todo-entry
    ;;          :capture-template org-projectile-capture-template
    ;;          :capture-heading "Project ToDo"
    ;;          :capture-character "l") org-capture-templates)
    ;; )
  ;; (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  ;; == insert structure templates
  ;; use c-c c-, or <s
  ;; (require 'org-tempo)
  ;; == add execute language for latex when conduct c-c c-c for latex src block
  (org-babel-do-load-languages 'org-babel-load-languages '((shell . t) (latex . t) (C . t) (python . t) (dot . t) (gnuplot . t) (plantuml . t)))
  (setq exec-path (append  exec-path '("/library/tex/texbin")))
  ;; (setq org-latex-create-formula-image-program 'dvipng)
  (setq org-latex-create-formula-image-program 'imagemagick)
  ;; == org preview
  ;; org latex size
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
  ;; (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  ;; enable tikzpicture when preview latex tikz code
  (add-to-list 'org-latex-packages-alist
               '("" "tikz" t))
  ;; (eval-after-load "preview"
  ;;   '(add-to-list 'preview-default-preamble "\\previewenvironment{tikzpicture}" t))
  ;; == org bibtex
  (require 'ox-bibtex)
  (require 'ox-extra)
  (require 'org-mac-link)
  ;; == org html code highlight
  (setq org-html-htmlize-output-type 'css)
  ;; == org mode journal
  (setq org-journal-dir "~/documents/papers/journal/")
  ;; (setq org-journal-file-format "%y-%m-%d"
  ;;       org-journal-date-prefix "#+title: "
  ;;       org-journal-date-format "%a, %b %d %y"
  ;;       org-journal-time-prefix "* "
  ;;       org-journal-time-format "")
  ;; == org bullets
  (setq org-bullets-bullet-list '("■" "◆" "▲" "▶"))
  ;; == org project
  ;; (with-eval-after-load 'org-agenda
  ;;   (require 'org-projectile)
  ;;   (mapcar '(lambda (file)
  ;;              (when (file-exists-p file)
  ;;                (push file org-agenda-files)))
  ;;           (org-projectile-todo-files)))
  ;; == modeline clock display
  (setq spaceline-org-clock-p t)
  ;; == org brain
  ;; init
  (setq org-brain-path "~/documents/garage/orgible/brain")
  ;; for evil users
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
  :config
  (setq org-id-track-globally t)
  (push '("b" "brain" plain (function org-brain-goto-end)
          "* %i%?" :empty-lines 1)
        org-capture-templates)
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 12)
  ;; == org ref
  ;; bibtex
  (setq org-ref-default-bibliography '("~/Documents/Garage/orgible/references.bib")
        org-ref-pdf-directory "~/Documents/Papers/"
        org-ref-bibliography-notes "~/Documents/Garage/orgible/refile/paper-notes.org"
        bibtex-completion-bibliography "~/Documents/Garage/orgible/references.bib"
        bibtex-completion-pdf-field "file"
        org-ref-get-pdf-filename-function 'chxin/org-ref-get-pdf-filename)
  ;; use =, p= to open pdf in bibtex entry file
  (defun chxin/org-ref-get-pdf-filename (key)
    "Return the pdf filename indicated by zotero file field.
Argument KEY is the bibtex key."
    (let* ((results (org-ref-get-bibtex-key-and-file key))
           (bibfile (cdr results))
           entry)
      (with-temp-buffer
        (insert-file-contents bibfile)
        (bibtex-set-dialect (parsebib-find-bibtex-dialect) t)
        (bibtex-search-entry key nil 0)
        (setq entry (bibtex-parse-entry))
        (let ((e (org-ref-reftex-get-bib-field "file" entry)))
          (if (> (length e) 4)
              (let ((clean-field (replace-regexp-in-string "/+" "/" e)))
                (let ((first-file (car (split-string clean-field ";" t))))
                  ;; (concat org-ref-pdf-directory first-file) ;; add prefix to pad path
                  first-file
                  ))
            (message "PDF filename not found.")
            )))))
  ;; Override this function.
  (with-eval-after-load 'org-ref-core
    (defun org-ref-open-bibtex-pdf ()
      "Open pdf for a bibtex entry, if it exists. assumes point is in
the entry of interest in the bibfile.  but does not check that."
      (interactive)
      (save-excursion
        (bibtex-beginning-of-entry)
        (let* ((bibtex-expand-strings t)
               (entry (bibtex-parse-entry t))
               (key (reftex-get-bib-field "=key=" entry))
               (pdf (chxin/org-ref-get-pdf-filename key)))
          (message "%s" pdf)
          (if (file-exists-p pdf)
              (org-open-link-from-string (format "[[Skim://%s]]" pdf))
            )))))
  ;; set default app for org link
  ;; (setq org-file-apps
  ;;       '((auto-mode . emacs)
  ;;         ("\\.mm\\'" . default)
  ;;         ("\\.x?html?\\'" . default)
  ;;         ("\\.pdf\\'" . default)
  ;;         ;; ("\\.pdf\\'" . "displayline 1 %s")
  ;;         ))
  ;;== org noter
  (setq org-noter-separate-notes-from-heading t
  		org-noter-default-notes-file-names '("org-notes.org")
		org-noter-notes-search-path '("~/Documents/Papers"))
  ;;== add skim annotation to org
  (push (quote ("S" "Skim Annotation" entry
                                       (file+function org-ref-bibliography-notes my-org-move-point-to-capture-skim-annotation)
                                       "* %^{Logging for...} :skim_annotation:read:literature:
:PROPERTIES:
:Created: %U
:CITE: cite:%(my-as-get-skim-bibtex-key)
:SKIM_NOTE: %(my-org-mac-skim-get-page)
:SKIM_PAGE: %(my-as-get-skim-page)
:END:
%i
%?"
                                       :prepend f :empty-lines 1)) org-capture-templates)
  ;; (with-eval-after-load 'org-mac-skim-insert-page
    (org-link-set-parameters "Skim" :follow #'my-org-mac-skim-open)
    (defun my-org-mac-skim-open (uri)
      "Visit page and notes of pdf in Skim"
      (let* ((empty (when (string-match "\\(\\'\\)" uri) (match-string 1 uri)))
             (note (when (string-match ";;\\(.+\\)\\'" uri) (match-string 1 uri)))
             (page (when (string-match "::\\(.+\\);;" uri) (match-string 1 uri)))
             (document (substring uri 0 (match-beginning 0))))
        (message "page:%s, note:%s" page note)
        (do-applescript
         (concat
          "tell application \"Skim\"\n"
          "activate\n"
          "set theDoc to \"" document "\"\n"
          "open theDoc\n"
          (when page
            (concat
             "set thePage to " page "\n"
             "go document 1 to page thePage of document 1\n"))
          (when note
            (concat
             "set theNote to " note "\n"
             "go document 1 to item theNote of notes of page thePage of document 1\n"
             "set active note of document 1 to item theNote of notes of page thePage of document 1\n"))
          "end tell"))))
    (defadvice org-capture-finalize
        (after org-capture-finalize-after activate)
      "Advise capture-finalize to close the frame"
      (if (equal "S" (org-capture-get :key))
          (do-applescript "tell application \"Skim\"\n    activate\nend tell")))
    (defun my-as-get-skim-page-link ()
      (do-applescript
       (concat
        "tell application \"Skim\"\n"
        "set theDoc to front document\n"
        "set theTitle to (name of theDoc)\n"
        "set thePath to (path of theDoc)\n"
        "set thePage to (get index for current page of theDoc)\n"
        "set theSelection to selection of theDoc\n"
        "set theContent to (contents of (get text for theSelection))\n"
        "try\n"
        "    set theNote to active note of theDoc\n"
        "end try\n"
        "if theNote is not missing value then\n"
        "    set theContent to contents of (get text for theNote)\n"
        "    set theNotePage to get page of theNote\n"
        "    set thePage to (get index for theNotePage)\n"
        "    set theNoteIndex to (get index for theNote on theNotePage)\n"
        "else\n"
        "    if theContent is missing value then\n"
        "        set theContent to theTitle & \", p. \" & thePage\n"
        "        set theNoteIndex to 0\n"
        "    else\n"
        "        tell theDoc\n"
        "            set theNote to make new note with data theSelection with properties {type:highlight note, color:green}\n"
        "            set active note of theDoc to theNote\n"
        "            set text of theNote to (get text for theSelection)\n"
        "            set theNotePage to get page of theNote\n"
        "            set thePage to (get index for theNotePage)\n"
        "            set theNoteIndex to (get index for theNote on theNotePage)\n"
        "            set theContent to contents of (get text for theNote)\n"
        "        end tell\n"
        "    end if\n"
        "end if\n"
        "set theLink to \"Skim://\" & thePath & \"::\" & thePage & \";;\" & theNoteIndex & "
        "\"::split::\" & theContent\n"
        "end tell\n"
        "return theLink as string\n")))
    (defun my-as-get-skim-bibtex-key ()
      (let* ((name (do-applescript
                    (concat
                     "tell application \"Skim\"\n"
                     "set theDoc to front document\n"
                     "set theTitle to (name of theDoc)\n"
                     "end tell\n"
                     "return theTitle as string\n")))
             (key (when (string-match "\\(.+\\).pdf" name) (match-string 1 name))))
        key)
      ;; (message "%s" key))
      )
    (defun my-as-get-skim-page ()
      (let* ((page (do-applescript
                    (concat
                     "tell application \"Skim\"\n"
                     "set theDoc to front document\n"
                     "set thePage to (get index for current page of theDoc)\n"
                     "end tell\n"
                     "return thePage as string\n"))))
        page))
    (defun my-as-clean-skim-page-link (link)
      (let* ((link (replace-regexp-in-string "\n" " " link))
             (link (replace-regexp-in-string "- " " " link)))
        link))
    (defun my-org-mac-skim-get-page ()
      (interactive)
      (message "Applescript: Getting Skim page link...")
      ;; (my-as-clean-skim-page-link (my-as-get-skim-page-link)))
      (org-mac-paste-applescript-links (my-as-clean-skim-page-link (my-as-get-skim-page-link))))
    (defun my-org-mac-skim-insert-page ()
      (interactive)
      (insert (my-org-mac-skim-get-page)))
    (defun my-org-move-point-to-capture ()
      (cond ((org-at-heading-p) (org-beginning-of-line))
            (t (org-previous-visible-heading 1))))
    (defun my-org-ref-find-entry-in-notes (key)
      "Find or create bib note for KEY"
      (let* ((entry (bibtex-completion-get-entry key)))
        (widen)
        (goto-char (point-min))
        (unless (derived-mode-p 'org-mode)
          (error
           "Target buffer \"%s\" for jww/find-journal-tree should be in Org mode"
           (current-buffer)))
        (let* ((headlines (org-element-map
                              (org-element-parse-buffer)
                              'headline 'identity))
               (keys (mapcar
                      (lambda (hl) (org-element-property :CUSTOM_ID hl))
                      headlines)))
          ;; put new entry in notes if we don't find it.
          (if (-contains? keys key)
              (progn
                (org-open-link-from-string (format "[[#%s]]" key))
                (lambda nil
                  (cond ((org-at-heading-p
                         (org-beginning-of-line))
                        (t (org-previous-visible-heading 1))))
                )
            ;; no entry found, so add one
            (goto-char (point-max))
            (insert (org-ref-reftex-format-citation
                     entry (concat "\n" org-ref-note-title-format)))
            (mapc (lambda (x)
                    (save-restriction
                      (save-excursion
                        (funcall x))))
                  org-ref-create-notes-hook)
            (org-open-link-from-string (format "[[#%s]]" key))
            (lambda nil
              (cond ((org-at-heading-p)
                     (org-beginning-of-line))
                    (t (org-previous-visible-heading 1))))
            ))
        )))
    (defun my-org-move-point-to-capture-skim-annotation ()
      (let* ((keystring (my-as-get-skim-bibtex-key)))
        (my-org-ref-find-entry-in-notes keystring)
        ))
    ;; )
  (add-hook 'org-capture-prepare-finalize-hook #'(lambda () (my-as-set-skim-org-link (org-id-get-create))))
  (defun my-as-set-skim-org-link (id)
    (do-applescript (concat
                     "tell application \"Skim\"\n"
                     "set runstatus to \"not set\"\n"
                     "set theDoc to front document\n"
                     "try\n"
                     "    set theNote to active note of theDoc\n"
                     "end try\n"
                     "if theNote is not missing value then\n"
                     "    set newText to text of theNote\n"
                     "    set startpoint to  (offset of \"org-id:{\" in newtext)\n"
                     "    set endpoint to  (offset of \"}:org-id\" in newtext)\n"
                     "    if (startpoint is equal to endpoint) and (endpoint is equal to 0) then\n"
                     "        set newText to text of theNote & \"\norg-id:{\" & "
                     (applescript-quote-string id)
                     " & \"}:org-id\"\n"
                     "        set text of theNote to newText\n"
                     "        return \"set success\"\n"
                     "    end if\n"
                     "end if\n"
                     "end tell\n"
                     "return \"unset\"\n"
                     )))
  (defun applescript-quote-string (argument)
    "Quote a string for passing as a string to AppleScript."
    (if (or (not argument) (string-equal argument ""))
        "\"\""
      ;; Quote using double quotes, but escape any existing quotes or
      ;; backslashes in the argument with backslashes.
      (let ((result "")
            (start 0)
            end)
        (save-match-data
          (if (or (null (string-match "[^\"\\]" argument))
                  (< (match-end 0) (length argument)))
              (while (string-match "[\"\\]" argument start)
                (setq end (match-beginning 0)
                      result (concat result (substring argument start end-of-defun-function)
                                     "\\" (substring argument end (1+ end)))
                      start (1+ end))))
          (concat "\"" result (substring argument start) "\"")))))
  ;; )
  ;; == org online image
  ;; add image link tag: [[imghttp(s)://xxxx.png]]
  (push "~/Documents/Garage/orgible/elisp/" load-path)
  (require 'org-yt)
  (defun chxin/org-image-link (protocol link _description)
    "Interpret LINK as base64-encoded image data."
    (cl-assert (string-match "\\`img" protocol) nil
               "Expected protocol type starting with img")
    (let ((buf (url-retrieve-synchronously (concat (substring protocol 3) ":" link))))
      (cl-assert buf nil
                 "Download of image \"%s\" failed." link)
      (with-current-buffer buf
        (goto-char (point-min))
        (re-search-forward "\r?\n\r?\n")
        (buffer-substring-no-properties (point) (point-max)))))
  (org-link-set-parameters
   "imghttp"
   :image-data-fun #'chxin/org-image-link)
  (org-link-set-parameters
   "imghttps"
   :image-data-fun #'chxin/org-image-link)
  ;; set image size
  (setq org-image-actual-width (/ (display-pixel-width) 4))
  ;; #+ATTR_ORG: :width 50
  ;; == mobile org
  ;; /davs:user:password@remote.host:/org/webdav/
  ;; (setq org-mobile-directory "/dav:chengxinhust\@163.com@dav.jianguoyun.com:/dav/orgible")
  ;; (setq org-mobile-directory "/Users/xin/Downloads/Garage/orgible")
  ;; the fold to sync on MAC
  ;; (setq org-directory "/Users/xin/Documents/Garage/orgible")
  ;; the fold to sync on mobile phone
  ;; (setq org-mobile-directory "~/dl/owncloud/mobileorg")
  ;; the file to store pull message and tags
  ;; (setq org-mobile-inbox-for-pull "/Users/xin/Documents/Garage/orgible/inbox.org")
  ;; == org blog site
  ;; (require 'init-site)
  ;; (setq org-export-in-background nil
  ;;       ;; Hide html built-in style and script.
  ;;       org-html-htmlize-output-type 'inline-css
  ;;       org-html-head-include-default-style nil
  ;;       org-html-head-include-scripts nil
  ;;       )


  ;; ==== latex mode
  (setq-default TeX-PDF-mode t)
  (add-hook 'doc-view-mode-hook 'auto-revert-mode)
  (setq-default fill-column 200)
  (setq preview-gs-command "/usr/local/bin/gs")
  ;; == use skim on macos to utilize synctex.
  ;; confer https://mssun.me/blog/spacemacs-and-latex.html
  ;; (require 'tex-buf)
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-start-server t)
  (setq TeX-source-correlate-method 'synctex)
  ;; auctex recognizes some standard viewers, but the default view command
  ;; does not appear to sync.
  (setq TeX-view-program-list
        '(("okular" "okular --unique %o#src:%n`pwd`/./%b")
          ;; skim -g option to open skim background
          ("macskim" "displayline -b %n %o %b")
          ("pdf tools" tex-pdf-tools-sync-view)
          ("zathura"
           ("zathura %o"
            (mode-io-correlate
             " --synctex-forward %n:0:%b -x \"emacsclient +%{line} %{input}\"")))))
  ;; select the viewers for each file type.

  (setq TeX-view-program-selection
        '((output-dvi "open")
          ;; (output-pdf "macskim")
          ;; (output-pdf "pdf tools")
          (output-html "eww")))
  (cond
   ((spacemacs/system-is-mac) (setq TeX-view-program-selection '((output-pdf "macskim"))))
   ;; ((spacemacs/system-is-mac) (setq TeX-view-program-selection '((output-pdf "pdf tools"))))
   ;; for linux, use okular or perhaps zathura.
   ((spacemacs/system-is-linux) (setq TeX-view-program-selection '((output-pdf "okular")))))

  ;; ==== translate
  (setq-default google-translate-default-source-language "en")
  (setq-default google-translate-default-target-language "zh-cn")
  (setq-default google-translate-translation-directions-alist '(("en" . "zh-cn")("zh-cn" . "en")))
  (setq-default google-translate--tkk-url "http://translate.google.cn")
  (setq-default google-translate-base-url "http://translate.google.cn/translate_a/single")
  (setq-default google-translate-listen-url "http://translate.google.cn/translate_tts")
  (setq-default google-translate-output-destination 'echo-area)
  (setq-default google-translate-pop-up-buffer-set-focus t)

  ;; === email mu4e mode
	(setq mu4e-account-alist
        '(
          ;; ("outlook"
          ;;  ;; under each account, set the account-specific variables you want.
          ;;  (mu4e-sent-messages-behavior sent)
          ;;  (mu4e-sent-folder "/outlook/.sent-mail")
          ;;  (mu4e-drafts-folder "/outlook/.drafts")
          ;;  (user-mail-address "chengxinhust@outlook.com")
          ;;  (user-full-name "chxin"))
          ("college"
           (mu4e-sent-messages-behavior sent)
           (mu4e-sent-folder "/college/.sent-items")
           (mu4e-drafts-folder "/college/.drafts")
           (user-mail-address "chengxin@hust.edu.cn")
           (user-full-name "xin cheng"))
          ("163"
           (mu4e-sent-messages-behavior sent)
           (mu4e-sent-folder "/163/.sent-items")
           (mu4e-drafts-folder "/163/.drafts")
           (user-mail-address "chengxinhust@163.com")
           (user-full-name "xin cheng"))
          ))
	;; (mu4e/mail-account-reset)
	;;; set up some common mu4e variables
	(setq mu4e-maildir "~/.mail"
        mu4e-trash-folder "/.mail/.trash"
        mu4e-refile-folder "/.mail/.archive"
        mu4e-get-mail-command "offlineimap"
        mu4e-update-interval 3600
        mu4e-compose-signature-auto-include nil
        mu4e-view-show-images t
        mu4e-view-show-addresses t)
	;;; mail directory shortcuts
	(setq mu4e-maildir-shortcuts
        '(
          ;; ("/outlook/inbox" . ?w
          ("/163/inbox" . ?1)
          ("/college/inbox" . ?c)))
	;;; bookmarks
	(setq mu4e-bookmarks
        `(("flag:unread and not flag:trashed" "unread messages" ?u)
          ("date:today..now" "today's messages" ?t)
          ("date:7d..now" "last 7 days" ?w)
          ("mime:image/*" "messages with images" ?p)
          (,(mapconcat 'identity
                       (mapcar
                        (lambda (maildir)
                          (concat "maildir:" (car maildir)))
                        mu4e-maildir-shortcuts) " or ")
           "all inboxes" ?i)))
	;;; os notifications
	(setq mu4e-enable-notifications t)
	(with-eval-after-load 'mu4e-alert
	  ;; enable desktop notifications
	  ;; (mu4e-alert-set-default-style 'notifications)) ; for linux
	  ;; (mu4e-alert-set-default-style 'libnotify))  ; alternative for linux
	  (mu4e-alert-set-default-style 'notifier))   ; for mac osx (through the
                                        ; terminal notifier app)
  ;; (mu4e-alert-set-default-style 'growl))      ; alternative for mac osx
  (setq mu4e-enable-mode-line t)

  ;; ==== python
  (setq python-indent-offset 4
        python-sort-imports-on-save t
        python-shell-interpreter "python3"
        pippel-python-command "python3"
        flycheck-python-pycompile-executable "python3"
        importmagic-python-interpreter "python3"
        flycheck-python-pylint-executable "pylint"
        flycheck-python-flake8-executable "flake8")

  ;; ==== eww
  ;; (defun eww-toggle-images ()
  ;;   "toggle whether images are loaded and reload the current page fro cache."
  ;;   (interactive)
  ;;   (setq shr-inhibit-images (not shr-inhibit-images))
  ;;   (eww-reload t)
  ;;   (message "images are now %s"
  ;;            (if shr-inhibit-images "off" "on")))
  ;; ;; toggle image display
  ;; (define-key eww-mode-map (kbd "i") #'eww-toggle-images)
  ;; (define-key eww-link-keymap (kbd "i") #'eww-toggle-images)
  ;; ;; minimal rendering by default
  ;; (setq shr-inhibit-images t)   ; toggle with `i`
  ;; (setq shr-use-fonts nil)      ; toggle with `f`
  (setq browse-url-browser-function 'eww-browse-url)

  ;; ==== golden ratio mode
  (golden-ratio-mode 1)
  (setq golden-ratio-auto-scale t)

  )

;; do not write anything past this comment. this is where emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#0a0814" "#f2241f" "#67b11d" "#b1951d" "#4f97d7" "#a31db1" "#28def0" "#b2b2b2"])
 '(custom-safe-themes
   (quote
    ("d91ef4e714f05fff2070da7ca452980999f5361209e679ee988e3c432df24347" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" default)))
 '(evil-want-Y-yank-to-eol t)
 '(evil-want-y-yank-to-eol nil)
 ;; '(org-agenda-files
 ;;   (quote
 ;;    ("~/documents/garage/orgible/inbox.org" "/Users/xin/documents/garage/orgible/refile/hardware.org" "/Users/xin/documents/garage/orgible/refile/projects.org" "/Users/xin/documents/garage/orgible/refile/software.org" "/Users/xin/documents/garage/orgible/refile/todo.org" "/Users/xin/documents/garage/orgible/refile/topic.org" "/Users/xin/documents/garage/orgible/refile/workflow.org" "/Users/xin/documents/garage/orgible/oxrign/README.org")))
 '(package-selected-packages
   (quote
    (org-noter rvm ruby-tools ruby-test-mode rubocop rspec-mode robe rbenv rake minitest chruby bundler inf-ruby demo-it origami notmuch stickyfunc-enhance srefactor helm-cscope xcscope yaml-mode web-beautify livid-mode skewer-mode json-mode json-snatcher json-reformat js2-refactor multiple-cursors js2-mode js-doc coffee-mode org-brain ox-twbs org-ref pdf-tools key-chord ivy tablist helm-bibtex parsebib biblio biblio-core org-ql peg ov org-super-agenda ts aio elfeed elfeed-web simple-httpd elfeed-org elfeed-goodies ace-jump-mode noflet spray powershell ox-gfm mu4e-maildirs-extension mu4e-alert ht solarized-theme zenburen-theme company-auctex auctex-latexmk auctex ox-reveal web-mode tagedit slim-mode scss-mode sass-mode pug-mode helm-css-scss haml-mode emmet-mode company-web web-completion-data ox-ioslide disaster company-c-headers cmake-mode clang-format xterm-color unfill smeargle shell-pop orgit org-projectile org-category-capture org-present org-pomodoro alert log4e gntp org-mime org-download mwim multi-term magit-gitflow magit-popup htmlize helm-gitignore helm-company helm-c-yasnippet gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe+ git-gutter-fringe fringe-helper git-gutter+ git-gutter fuzzy flyspell-correct-helm flyspell-correct flycheck-pos-tip pos-tip flycheck evil-magit magit transient git-commit with-editor eshell-z eshell-prompt-extras esh-help diff-hl company-statistics company-anaconda company auto-yasnippet yasnippet auto-dictionary ac-ispell auto-complete request-deferred deferred graphql yapfify pyvenv pytest pyenv-mode py-isort pip-requirements live-py-mode hy-mode dash-functional helm-pydoc cython-mode anaconda-mode pythonic mmm-mode markdown-toc markdown-mode gh-md leetcode ws-butler winum which-key volatile-highlights vi-tilde-fringe uuidgen use-package toc-org spaceline powerline restart-emacs request rainbow-delimiters popwin persp-mode pcre2el paradox spinner org-plus-contrib org-bullets open-junk-file neotree move-text macrostep lorem-ipsum linum-relative link-hint indent-guide hydra lv hungry-delete hl-todo highlight-parentheses highlight-numbers parent-mode highlight-indentation helm-themes helm-swoop helm-projectile projectile pkg-info epl helm-mode-manager helm-make helm-flx helm-descbinds helm-ag google-translate golden-ratio flx-ido flx fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist highlight evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state smartparens evil-indent-plus evil-iedit-state iedit evil-exchange evil-escape evil-ediff evil-args evil-anzu anzu evil goto-chg undo-tree eval-sexp-fu elisp-slime-nav dumb-jump f dash s diminish define-word column-enforce-mode clean-aindent-mode bind-map bind-key auto-highlight-symbol auto-compile packed aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line helm avy helm-core popup async)))
 '(paradox-github-token t)
 '(send-mail-function (quote smtpmail-send-it)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+end_src

